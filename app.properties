// ----------------Cluster Configuration-----------------

// Name of the cluster this instance is in
ivan.prod.cluster=test

// ----------------------Logging-----------------------

ivan.prod.log.file=ivan.log
ivan.prod.log.level=Info

// -------------Transaction Configuration----------------

// Format for transactions
ivan.prod.transaction.format=json
// Transaction ID's active
ivan.prod.transaction.id.stamp=True

// -----------------Event Configuration--------------

// Port to listen for events on
ivan.prod.udp.port=8764
// Method for streaming events
ivan.prod.event.stream.method=udp
// Format for events
ivan.prod.event.format=json

// --------------HTTP Socket Configuration----------------

// HTTP host to register with Consul
ivan.prod.http.host=127.0.0.1
// HTTP Port
ivan.prod.http.port=8766

// --------------------Connectivity----------------------

// Optional connectivity information when dependent services are
// needed and not registered with Consul

// Neo4j Connectivity String
// Used if neo4j.discover is false
// include username and password here
ivan.prod.neo4j=neo4j://localhost:7687
// Should we use Consul Service Discovery to find Neo4j?
ivan.prod.neo4j.discover=false
// If we are using service discovery, then we will also
// need to provide authentication information
ivan.prod.neo4j.auth.un=neo4j
ivan.prod.neo4j.auth.pw=admin

// Consul Agent
// ivan.prod.consul=http://127.0.0.1/8500
// Location of the SSL Cert used to communicate with Consul
// ivan.prod.consul.cert=
// ACL Token string
// ivan.prod.consul.token=

// Vault Server
// ivan.prod.vault=http://127.0.0.1/8200
// Location of the SSL Cert used to communicate with Vault
// ivan.prod.vault.cert=
// Authentication type for Vault
// BASIC for userpass
// APPROLE for AppRole
// ivan.prod.vault.authtype=BASIC
// Authentication info for Vault
// ivan.prod.vault.un=test
// ivan.prod.vault.pw=test

// --------------------Security----------------------

// true to enable HTTPS socket, false to use HTTP socket
// If true, you need to either enable using Vault as a CA,
// and connect to a Vault instance, or provide an ssl.properties
// file which contains the certificate details.  Keep in mind that
// the second method is not recommended for Production use, and
// SSL Certs should always come from Vault when running as a
// Linux Service or inside a Container.
//
// Secure values are configured by cluster name.
// See the configuration above, and the matching config options.
ivan.prod.transaction.security.ssl.enabled=false
// true to enable AES Encryption on events (UDP Messages)
ivan.prod.event.security.aes.enabled=false
// Should Ivan generate SSL Certs from a connected Vault Instance
// acting as a Certificate Authority?
ivan.prod.transaction.security.ssl.ca.vault.active=false
ivan.prod.transaction.security.ssl.ca.vault.role_name=test
ivan.prod.transaction.security.ssl.ca.vault.common_name=test
// Authentication type:
//  - none: No authentication required
//  - single: basic-auth with single user/password set in properties file
//  - basic: basic-auth with users stored in Neo4j
ivan.prod.transaction.security.auth.type=none
// If auth.type is single, these set the only user.
// If auth.type is basic, these set the default user.
ivan.prod.test.transaction.security.auth.user=test
ivan.prod.test.transaction.security.auth.password=test
// Password used for SHA1 algorithm to generate hashes of the stored password
ivan.prod.test.transaction.security.hash.password=test
// Key used for AES Encryption
ivan.prod.test.event.security.out.aes.key=s3cr3tk3y
// Salt used for AES Encryption
ivan.prod.test.event.security.out.aes.salt=asdff8723lasdf(**923412
// Key used for AES Encryption
ivan.prod.test.event.security.in.aes.key=4n0th3rk4y
// Salt used for AES Encryption
ivan.prod.test.event.security.in.aes.salt=asdff8723lasdf(**923412
